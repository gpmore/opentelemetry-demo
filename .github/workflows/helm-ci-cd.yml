name: Helm CI/CD Pipeline with ECR

on:
  push:
    branches:
      - main

env:
  APP_NAME: ${{ vars.APP_NAME }}
  REGION: ${{ vars.REGION }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  NAMESPACE: ${{ vars.NAMESPACE }}
  RELEASE_NAME: ${{ vars.RELEASE_NAME }}
  OTEL_JAVA_AGENT_VERSION: ${{ vars.OTEL_JAVA_AGENT_VERSION }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.REGION }}.amazonaws.com/${{ vars.APP_NAME }}

jobs:
  checkout:
    name: Checkout
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.extract_sha.outputs.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract SHA
        id: extract_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Images to ECR
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REPO }}

      - name: Build and Push All Service Images to ECR
        run: |
          SERVICES=(ad cart checkout currency email fraud-detection frontend image-provider load-generator payment product-catalog quote recommendation shipping)
          for SERVICE in "${SERVICES[@]}"; do
            TAG="${{ env.IMAGE_TAG }}-$SERVICE"
            case "$SERVICE" in
              ad) DOCKERFILE_PATH=./src/ad/Dockerfile ;;
              cart) DOCKERFILE_PATH=./src/cart/src/Dockerfile ;;
              checkout) DOCKERFILE_PATH=./src/checkout/genproto/Dockerfile ;;
              currency) DOCKERFILE_PATH=./src/currency/genproto/Dockerfile ;;
              email) DOCKERFILE_PATH=./src/email/Dockerfile ;;
              fraud-detection) DOCKERFILE_PATH=./src/fraud-detection/Dockerfile ;;
              frontend) DOCKERFILE_PATH=./src/frontend/genproto/Dockerfile ;;
              image-provider) DOCKERFILE_PATH=./src/image-provider/Dockerfile ;;
              load-generator) DOCKERFILE_PATH=./src/load-generator/Dockerfile ;;
              payment) DOCKERFILE_PATH=./src/payment/Dockerfile ;;
              product-catalog) DOCKERFILE_PATH=./src/product-catalog/genproto/Dockerfile ;;
              quote) DOCKERFILE_PATH=./src/quote/Dockerfile ;;
              recommendation) DOCKERFILE_PATH=./src/recommendation/genproto/Dockerfile ;;
              shipping) DOCKERFILE_PATH=./src/shipping/Dockerfile ;;
              *) echo "❌ Unknown service: $SERVICE"; continue ;;
            esac
            docker build -t ${{ env.ECR_REPO }}:$TAG \
              -f $DOCKERFILE_PATH \
              --build-arg OTEL_JAVA_AGENT_VERSION=${{ env.OTEL_JAVA_AGENT_VERSION }} .
            docker push ${{ env.ECR_REPO }}:$TAG
          done

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      outcome: ${{ steps.helm_upgrade.outcome }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig

      - name: Set up Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update
      
      # - name: Debug: Print working directory and files
      #   run: |
      #     cd ${{ github.workspace }}
      #     pwd
      #     ls -la
      #     ls -la values.yaml || echo "values.yaml not found"

      - name: Deploy OpenTelemetry Demo using Helm
        id: helm_upgrade
        continue-on-error: true
        env:
          KUBECONFIG: kubeconfig
        run: |
          cd ${{ github.workspace }}
          # echo "🧪 Listing directory to confirm values.yaml presence"
          # ls -la
          # ls -la values.yaml
          helm upgrade --install ${{ env.RELEASE_NAME }} open-telemetry/opentelemetry-demo \
            --namespace ${{ env.NAMESPACE }} --create-namespace \
            -f values.yaml

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig

      - name: Validate Deployment
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }}

  rollback:
    name: Rollback if Deployment Fails
    if: needs.deploy.outputs.outcome == 'failure'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig

      - name: Rollback Helm Release
        env:
          KUBECONFIG: kubeconfig
        run: |
          echo "Helm deployment failed. Rolling back..."
          helm rollback ${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }}
          echo "Rollback History..."
          helm history ${{ env.RELEASE_NAME }} --namespace ${{ env.NAMESPACE }}
  
  test:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [validate, rollback]
    if: always()
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig

      - name: Run Port Forward in Background
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl port-forward svc/frontend-proxy 8080:8080 -n ${{ env.NAMESPACE }} &
          echo $! > portforward_pid.txt
          sleep 10

      - name: Run Curl Smoke Test
        run: |
          curl -f http://localhost:8080 || (cat portforward_pid.txt | xargs kill && exit 1)
          echo "\n ✅ Test passed."

      - name: Cleanup Port Forward
        if: always()
        run: |
          cat portforward_pid.txt | xargs kill || true
